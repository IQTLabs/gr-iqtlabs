id: iqtlabs_write_freq_samples
label: write_freq_samples
category: '[iqtlabs]'
flags: [python, cpp]
documentation: |-
  This block writes N vectors of complex samples from a source to disk as a zst,
  after receiving an rx_freq tag.

  input:
    vector of gr_complex, samples.

  parameters:
    tag: expected PMT tag containing center frequency (generally "rx_freq" for Soapy or UHD sources).
    vlen: length of sample vector.
    sdir: directory to write samples to.
    write_step_samples: number of vectors to write after receiving a new tag.
    skip_tune_step_samples: skip N vectors after first receiving a new tag.

templates:
  imports: from gnuradio import iqtlabs
  make: iqtlabs.write_freq_samples(${tag}, ${vlen}, ${sdir}, ${write_step_samples}, ${skip_tune_step_samples})

cpp_templates:
  includes: ['#include <gnuradio/iqtlabs/write_freq_samples.h>']
  declarations: 'gr::iqtlabs::write_freq_samples::sptr ${id};'
  make: 'this->${id} = gr::iqtlabs::write_freq_samples::make(${tag}, ${vlen}, ${sdir}, ${write_step_samples}, ${skip_tune_step_samples}, ${samp_rate});'
  link: ['libgnuradio-iqtlabs.so']

parameters:
- id: tag
  dtype: string
- id: vlen
  dtype: int
- id: sdir
  dtype: string
- id: write_step_samples
  dtype: int
- id: skip_tune_step_samples
  dtype: int
- id: samp_rate
  dtype: int

inputs:
- label: input
  domain: stream
  dtype: complex
  vlen: ${ vlen }

file_format: 1
