---
id: iqtlabs_iq_inference
label: iq_inference
category: '[iqtlabs]'
flags: [python, cpp]
documentation: |-
  This block accepts a stream of complex I/Q samples and dB values,
  correlates them in time, and runs inference on the samples via Torchserve.

  Torchserve inference is done in a background thread, to avoid
  blocking the flowgraph. Torchserve batching is currently not done,
  to trade inference latency for efficiency (generally, the inference
  response time is much less than scanner dwell time).

  input:
    vector of complex, representing original I/Q samples,
    tagged with center frequency.
    vector of floats, representing FFT dB power values,
    tagged with center frequency.
  output:
    JSON inference results.

  parameters:
    tag: received frequency tag name.
    vlen: length of complex/FFT dB vector.
    min_peak_points: Only run inference on buckets with this minimum dB power.
    model_names: if not empty, comma separated list of model names.
    model_server: if not empty, do torchserve inference to this address.
    confidence: Only output inference results where confidence is greater.
    n_inference: if > 0, only run inference on 1/n_inference images.
    samp_rate: sample rate.

templates:
  imports: from gnuradio import iqtlabs
  make: >
    iqtlabs.iq_inference(${tag}, ${vlen}, ${sample_buffer}, ${min_peak_points},
    ${model_server}, ${model_names}, ${confidence}, ${n_inference}, ${samp_rate}

cpp_templates:
  includes: ['#include <gnuradio/iqtlabs/iq_inference.h>']
  declarations: 'gr::iqtlabs::image_inference::sptr ${id};'
  make: >
    this->${id} = gr::iqtlabs::iq_inference::make(${tag}, ${vlen},
    ${sample_buffer, ${min_peak_points}, ${model_server}, ${model_names},
    ${confidence}, ${n_inference}, ${samp_rate})
  link: ['libgnuradio-iqtlabs.so']

parameters:
  - id: tag
    dtype: string
    default: 'rx_freq'
  - id: vlen
    dtype: int
  - id: sample_buffer
    dtype: int
  - id: min_peak_points
    dtype: float
  - id: model_server
    dtype: str
  - id: model_names
    dtype: str
  - id: confidence
    dtype: float
  - id: n_inference
    dtype: int
  - id: samp_rate
    dtype: int

asserts:
  - ${ tag != "" }
  - ${ vlen > 0 }
  - ${ sample_buffer > 0 }

inputs:
  - label: samples
    domain: stream
    dtype: complex
    vlen: ${ vlen }
  - label: FFT power
    domain: stream
    dtype: float
    vlen: ${ vlen }

outputs:
  - label: inference json
    domain: stream
    dtype: byte
    vlen: 1

file_format: 1
