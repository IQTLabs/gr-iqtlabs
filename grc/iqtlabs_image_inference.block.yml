---
id: iqtlabs_image_inference
label: image_inference
category: '[iqtlabs]'
flags: [python, cpp]
documentation: |-
  This block accepts dB values from retune_fft, reformats them
  as images and runs inference on them via Torchserve. The inference
  results are used to annotate the images with bounding boxes
  and RSSI values (the bounding boxes are used to select the original
  dB power values within the boxes).

  Torchserve inference is done in a background thread, to avoid
  blocking the flowgraph. Torchserve batching is currently not done,
  to trade inference latency for efficiency (generally, the inference
  response time is much less than scanner dwell time).

  input:
    vector of floats, representing FFT dB power values,
    tagged with center frequency.
  output:
    JSON inference results.

  parameters:
    tag: received frequency tag name.
    vlen: length of FFT dB vector.
    x: size in pixels of image to produce (x axis)
    y: size in pixels of image to produce (y axis)
    image_dir: directory to accumulate image results and logs under.
    convert_alpha: alpha value when converting from dB power to image.
    norm_alpha: alpha value to cv::normalize().
    norm_beta: beta value to cv::normalize().
    norm_type: type of normalization to cv::normalize().
    colormap: type of colormap to cv::applyColorMap().
    interpolation: type of interpolation to cv::resize().
    flip: if -1, 0, or 1, type of transform to apply to image in cv::flip().
    min_peak_points: Only run inference on buckets with this minimum dB power.
    model_names: if not empty, comma separated list of model names.
    model_server: if not empty, do torchserve inference to this address.
    confidence: Only output inference results where confidence is greater.
    max_rows: if > 0, use at most N dB input vectors per image.
    rotate_secs: if > 0, use a new epoch timestamped directory every N seconds.
    n_image: if > 0, only log 1/n_image images.
    n_inference: if > 0, only run inference on 1/n_inference images.
    samp_rate: sample rate.
    text_color: 3-tuple of BGR for text color.

templates:
  imports: from gnuradio import iqtlabs
  make: >
    iqtlabs.image_inference(${tag}, ${vlen}, ${x}, ${y}, ${image_dir},
    ${convert_alpha}, ${norm_alpha}, ${norm_beta}, ${norm_type}, ${colormap},
    ${interpolation}, ${model_server}, ${model_name}, ${confidence},
    ${max_rows}, ${rotate_secs}, ${n_image}, ${n_inference}, ${samp_rate},
    ${text_color})

cpp_templates:
  includes: ['#include <gnuradio/iqtlabs/image_inference.h>']
  declarations: 'gr::iqtlabs::image_inference::sptr ${id};'
  make: >
    this->${id} = gr::iqtlabs::image_inference::make(${tag}, ${vlen},
    ${x}, ${y}, ${image_dir}, ${convert_alpha}, ${norm_alpha}, ${norm_beta},
    ${norm_type}, ${colormap}, ${interpolation}, ${model_server},
    ${model_name}, ${confidence}, ${max_rows}, ${rotate_secs}, ${n_image},
    ${n_inference}, ${samp_rate}, ${text_color})
  link: ['libgnuradio-iqtlabs.so']


parameters:
  - id: tag
    dtype: string
    default: 'rx_freq'
  - id: vlen
    dtype: int
  - id: x
    dtype: int
  - id: y
    dtype: int
  - id: image_dir
    dtype: str
  - id: convert_alpha
    dtype: float
    default: 255
  - id: norm_alpha
    dtype: float
    default: 0
  - id: norm_beta
    dtype: float
    default: 1
  - id: norm_type
    dtype: int
    default: 32  # cv::NORM_MINMAX
  - id: colormap
    dtype: int
    default: 20  # cv::TURBO
  - id: interpolation
    dtype: int
    default: 2  # cv::INTER_CUBIC
  - id: flip
    dtype: int
    default: 99  # cv::flip(), or 99 for no flip
  - id: min_peak_points
    dtype: float
  - id: model_name
    dtype: str
  - id: model_server
    dtype: str
  - id: confidence
    dtype: float
  - id: max_rows
    dtype: int
  - id: rotate_secs
    dtype: int
  - id: n_image
    dtype: int
  - id: n_inference
    dtype: int
  - id: samp_rate
    dtype: int
  - id: text_color
    dtype: str

asserts:
  - ${ tag != "" }
  - ${ vlen > 0 }
  - ${ !model_server || (model_server && model_names) }

inputs:
  - label: FFT power
    domain: stream
    dtype: float
    vlen: ${ vlen }

outputs:
  - label: inference json
    domain: stream
    dtype: byte
    vlen: 1
  - id: inference
    domain: message

file_format: 1
