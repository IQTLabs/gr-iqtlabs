---
id: iqtlabs_vkfft
label: vkfft
category: '[iqtlabs]'
flags: [python, cpp]
documentation: |-
  This block uses VkFFT to do FFT offload via Vulkan.

  input:
    vector of complex, representing I/Q samples.
  output:
    vector of complex, representing FFT output.

  parameters:
    fft_batch_size: how many FFT windows in the input vector.
    nfft: number of FFT points.
    shift: if true, move DC component to center of output
           (see gnuradio fft shift parameter).

templates:
  imports: from gnuradio import iqtlabs
  make: iqtlabs.vkfft(${fft_batch_size}, ${nfft}, ${shift})

cpp_templates:
  includes: ['#include <gnuradio/iqtlabs/vkfft.h>']
  declarations: 'gr::iqtlabs::vkfft::sptr ${id};'
  make: >
    this->${id} = gr::iqtlabs::vkfft::make(
    ${fft_batch_size}, ${nfft}, ${bool});
  link: ['libgnuradio-iqtlabs.so']

asserts:
  - ${ fft_batch_size > 0 }
  - ${ nfft > 0 }

parameters:
  - id: fft_batch_size
    dtype: int
  - id: nfft
    dtype: int
  - id: shift
    dtype: bool

inputs:
  - label: input
    domain: stream
    dtype: complex
    vlen: ${ fft_batch_size * nfft }

outputs:
  - label: output
    domain: stream
    dtype: complex
    vlen: ${ fft_batch_size * nfft }

file_format: 1
