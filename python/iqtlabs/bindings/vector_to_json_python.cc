/*
 * Copyright 2024 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(0)                                                       */
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(vector_to_json.h)                                        */
/* BINDTOOL_HEADER_FILE_HASH(439944a338f5d93320c38b18d48750a0)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <gnuradio/iqtlabs/vector_to_json.h>
// pydoc.h is automatically generated in the build directory
#include <vector_to_json_pydoc.h>

template <typename T>
void bind_vector_to_json_template(py::module& m, const char* classname)
{
    using vector_to_json = gr::iqtlabs::vector_to_json<T>;

    py::class_<vector_to_json,
               gr::block,
               gr::basic_block,
               std::shared_ptr<vector_to_json>>(m, classname)
        .def(py::init(&gr::iqtlabs::vector_to_json<T>::make),
             py::arg("vlen"));
}

void bind_vector_to_json(py::module& m)
{
    bind_vector_to_json_template<std::int16_t>(m, "vector_to_json_ss");
    bind_vector_to_json_template<std::int32_t>(m, "vector_to_json_ii");
    bind_vector_to_json_template<float>(m, "vector_to_json_ff");
    bind_vector_to_json_template<gr_complex>(m, "vector_to_json_cc");
}
